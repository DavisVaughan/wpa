% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/network_g2g.R
\name{network_g2g}
\alias{network_g2g}
\alias{g2g_network}
\title{Create a network plot with the group-to-group query}
\usage{
network_g2g(
  data,
  time_investor,
  collaborator,
  metric,
  exc_threshold = 0.1,
  subtitle = "Collaboration Across Organizations",
  return = "plot",
  ...
)

g2g_network(
  data,
  time_investor,
  collaborator,
  metric,
  exc_threshold = 0.1,
  subtitle = "Collaboration Across Organizations",
  return = "plot",
  ...
)
}
\arguments{
\item{data}{Data frame containing a G2G query.}

\item{time_investor}{String containing the variable name for the Time Investor column.}

\item{collaborator}{String containing the variable name for the Collaborator column.}

\item{metric}{String containing the variable name for metric.}

\item{exc_threshold}{Exclusion threshold to apply.}

\item{subtitle}{String to override default plot subtitle.}

\item{return}{Character vector specifying what to return, defaults to "plot".
Valid inputs include:
\itemize{
\item "plot": return a network plot.
\item "table": return a raw data table used to plot the network.
\item "network": return a network object generated by \code{network::network()}
}}

\item{...}{Additional arguments to pass to \code{GGally::ggnet2()}}
}
\description{
Pass a data frame containing a group-to-group query and return a network plot.
Automatically handles "Collaborators_within_group" and "Other_collaborators" within query data.
}
\examples{
\dontrun{
## Return a network plot
g2g_data \%>\%
  network_g2g(time_investor = "TimeInvestors_Organization",
              collaborator = "Collaborators_Organization",
              metric = "Collaboration_hours")

## Export the underlying network object for more customization
g2g_data \%>\%
  network_g2g(time_investor = "TimeInvestors_Organization",
              collaborator = "Collaborators_Organization",
              metric = "Collaboration_hours",
              return = "network") \%>\%
  GGally::ggnet2(size = 20,
                 color = "#ed786f",
                 label = TRUE,
                 label.size = 2,
                 label.color = "black",
                 edge.size = "weights",
                 edge.alpha = .5) +
  theme(plot.background = element_rect(fill = "black"),
        text = element_text(colour = "white"))
}

}
